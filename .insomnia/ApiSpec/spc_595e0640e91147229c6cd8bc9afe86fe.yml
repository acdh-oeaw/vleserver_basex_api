_id: spc_595e0640e91147229c6cd8bc9afe86fe
type: ApiSpec
parentId: wrk_52ee7131a91b4bd3b92d81960c20c046
modified: 1683646804388
created: 1683622804850
fileName: editing dictionary like XML datasets
contents: >-
  openapi: 3.0.1

  security:
    - httpBasicWithSHA256Pws: []
  info:
    contact:
      name: Omar Siam
      url: https://www.oeaw.ac.at/acdh/tools/vle/
      email: Omar.Siam@acdh.oeaw.ac.at
    license:
      x-name-is-spdx: true
      name: MIT
      url: http://www.opensource.org/licenses/MIT
    termsOfService: https://vle-curation.acdh.oeaw.ac.at/static/terms-of-use.html
    version: 2.0.0
    title: API Problem and JSON HAL based API for editing dictionary like XML datasets
    description: API Problem and JSON HAL based API for editing dictionary like XML datasets. Accept application/json can be used for unauthenticated access.
  servers:

  - url: http://localhost:8984/restvle
    description: Local development server
  - url: https://vle-curation.acdh.oeaw.ac.at/restvle
    description: Production server
  - url: https://basex-dboe.hephaistos.arz.oeaw.ac.at/restvle
    description: DBÃ– Zetteldaten
  tags:
    - name: _
      description: API Problem and JSON HAL based API for editing dictionary like XML datasets.
    - name: dicts
      description: Query and manipulate dictionaries and the special users "dictionary". See dict.xqm.
    - name: entries
      description: Query and manipulate entries in the dictionary. See entries.xqm
    - name: public
      description: The public part of the API. No authentication and world-readable unless the dictionary is restriced or Accept is application/vnd.wde.v2+json
    - name: internal
      description: Override the default behavior.
    - name: changes
      description: Access to the change log entries stored for a particular entry in the
        dictionaries.
    - name: users
      description: "Manipulate the users and user rights for a dictionary. Can also be\
        \ used by global admin users to manipulate users for any table when used with\
        \ \"dict_users\".\r\nDefinitions:\r\n<ul>\r\n<li>A standard user is a user that\
        \ is authorized to read and write her own entries in a dictionary.</li>\r\n<li>An\
        \ admin user is a user that is authorized to read and write any entry in a partictular\
        \ dictionary (writeown = 'n')</li>\r\n<li>A global admin user is a user that is\
        \ authorized to read and write any entry in \"dict_users\". Global admin users\
        \ are authorized to manipulate users for any dictionary also through a url referriung\
        \ to that dictionary.</li>\r\n</ul>. See users.xqm"
  paths:
    /dicts/{dict_name}/entries/{entries_id}/changes:
      get:
        operationId: getEntrieChanges
        tags:
        - changes
        description: Read only. The list size can be limited by passing pageSize. For
          a pageSize of more than 10 no entry before is returned as embedded result.
          Default pageSize is 25. For only getting the changes of a user pass a user
          paramter with the user name.
        parameters:
        - name: dict_name
          in: path
          description: Name of an existing dictionary. dict_users does not record changes
          required: true
          schema:
            type: string
        - name: entries_id
          in: path
          description: ID referencing a particular entry
          required: true
          schema:
            type: string
        responses:
          "200":
            description: OK
            content: {}
          "401":
            description: Unauthorized
            content: {}
          "403":
            description: Forbidden
            content: {}
          "406":
            description: Not Acceptable
            content: {}
          "415":
            description: Unsupported Media Type
            content: {}
    /dicts/{dict_name}/entries/{entries_id}/changes/{changes_timestamp}:
      get:
        operationId: getEntryChangeByTimestamp
        tags:
        - changes
        description: Read only.
        parameters:
        - name: dict_name
          in: path
          description: Name of an existing dictionary. dict_users does not record changes
          required: true
          schema:
            type: string
        - name: entries_id
          in: path
          description: ID referencing a particular entry
          required: true
          schema:
            type: string
        - name: changes_timestamp
          in: path
          description: Timstamp of a particular saved entry before the change
          required: true
          schema:
            maximum: 1
            minimum: 0
            type: string
        responses:
          "200":
            description: |-
              A JSON HAL based list of documents. If pageSize is 10 or less the
                      individual entries are included.
            content: 
              application/json:
                schema:
                  x-xml-type: item()
                  type: string
              application/problem+xml:
                schema:
                  x-xml-type: item()
                  type: string
              application/problem+json:
                schema:
                  x-xml-type: item()
                  type: string
              application/hal+json:
                schema:
                  x-xml-type: item()
                  type: string
          "401":
            description: Unauthorized
            content: {}
          "403":
            description: Forbidden
            content: {}
          "404":
            description: Not Found
            content: {}
          "406":
            description: Not Acceptable
            content: {}
          "415":
            description: Unsupported Media Type
            content: {}
    /dicts:
      get:
        operationId: getDicts
        summary: A list of all dictionaries available on this server.
        parameters:
          - schema:
              x-xml-type: xs:integer
              type: string
            in: query
            name: page
            description: The page page to return based on the given pageSize
            required: false
          - schema:
              x-xml-type: xs:integer
              type: string
            in: query
            name: pageSize
            description: Number of entries to return per request
            required: false
        responses:
          '200':
            content:
              application/vnd.wde.v2+json:
                schema:
                  nullable: true
                  x-xml-type: item()
                  type: string
              application/json:
                schema:
                  nullable: true
                  x-xml-type: item()
                  type: string
              application/problem+xml:
                schema:
                  nullable: true
                  x-xml-type: item()
                  type: string
              application/problem+json:
                schema:
                  nullable: true
                  x-xml-type: item()
                  type: string
              application/hal+json:
                schema:
                  nullable: true
                  x-xml-type: item()
                  type: string
            description: |-
              A JSON HAL based list of dictionaries. If pageSize is 10 or less the
                      individual entries are included.
          "401":
            description: Unauthorized
            content: {}
          "403":
            description: Forbidden
            content: {}
          "406":
            description: Not Acceptable
            content: {}
          "415":
            description: Unsupported Media Type
            content: {}
        tags:
          - dicts
          - public
        description: Please note that a client sending Accept application/vnd.wde.v2+json is required to provide credentials. Use application/json or application/hal+json for unrestricted read access.
      post:
        operationId: postDicts
        parameters:
          - schema:
              x-xml-type: xs:string
              type: string
            in: header
            name: Content-Type
            description: Required to be application/json else returns 415.
            required: false
          - schema:
              x-xml-type: xs:string
              type: string
            in: header
            name: Accept
            description: Required to be application/vnd.wde.v2+json else returns 403.
            required: false
        tags:
        - dicts
        summary: Create a new dictionary.
        description: "Can create an empty user rights storage\
          \ by using the special name \"dict_users\".\r\nIn order to create a dictionary\
          \ you need to be an admin user at least for that dictionary. See users.\r\n\
          If the data base is empty any user may create \"dict_users\"."
        requestBody:
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/dicts'
          required: true
        responses:
          "201":
            description: Created
            content:
              application/problem+json:
                schema:
                  $ref: "#/components/schemas/problem_json_201"
              application/problem+xml:
                schema:
                  x-xml-type: item()
                  type: string
          "400":
            description: Client Error
            content: {}
          "401":
            description: Unauthorized
            content: {}
          "403":
            description: Forbidden
            content: {}
          "406":
            description: Not Acceptable
            content: {}
          "415":
            description: Unsupported Media Type
            content: {}
          "422":
            description: Unprocessable Entity
            content: {}
        x-codegen-request-body-name: body
    /dicts/{dict_name}:
      get:
        operationId: getDictByName
        tags:
        - dicts
        description: "Get a dictionary. Does not provide any useful additional information\
          \ about the dicionary yet but will only succede if the user has the right\
          \ to access the dictionary using the supplied username and password. If the\
          \ user is not authorized for the dictionary 404 Item not found is returned.\r\
          \nTODO: Get statistics about the dictionary?"
        parameters:
        - name: dict_name
          in: path
          description: URL parameter dicts_name
          required: true
          schema:
            maximum: 1
            minimum: 0
            type: string
        responses:
          "200":
            description: OK
            content: {}
          "401":
            description: Unauthorized
            content: {}
          "403":
            description: Forbidden
            content: {}
          "404":
            description: Not Found
            content: {}
          "406":
            description: Not Acceptable
            content: {}
          "415":
            description: Unsupported Media Type
            content: {}
      delete:
        operationId: deleteDict
        tags:
        - dicts
        description: "Delete that dictionary.\r\nOnly global admins can do this. All\
          \ others get 403 \"Not allowed\""
        parameters:
        - name: dict_name
          in: path
          description: URL parameter dicts_name
          required: true
          schema:
            maximum: 1
            minimum: 0
            type: string
        responses:
          "204":
            description: No Content
            content: {}
          "401":
            description: Unauthorized
            content: {}
          "403":
            description: Forbidden
            content: {}
          "404":
            description: Not Found
            content: {}
          "406":
            description: Not Acceptable
            content: {}
          "415":
            description: Unsupported Media Type
            content: {}
    /dicts/{dict_name}/entries:
      get:
        operationId: getEntries
        tags:
        - entries
        description: "Get a list of entries.\r\nLimiting the query:\r\n<ul>\r\n<li>Query\
          \ parameter \"lem\": limit using the lemma column. May contain * jokers.</li>\r\
          \n<li>Query parameter \"sid\": limit using the sid column</li>\r\n<li>Query\
          \ parameters \"xpath\" and \"txt\": Do a (limited) xpath search to narrow\
          \ down the result.\r\nThe parameters may be used in a key => value style to\
          \ secify multiple xpath criteria. \"txt\" may contain \"*\" jokers.</li>\r\
          \n</ul>\r\nNotes on paging:\r\n<ul>\r\n<li>The page size can be set using\
          \ the pageSize query parameter. For performance reasons better do not request\
          \ more the a few hundred entries per page.</li>\r\n<li>Only if 10 or less\
          \ entries per page are requested the actual entry is sent for performance\
          \ reasons</li>\r\n</ul>"
        parameters:
        - name: dict_name
          in: path
          description: Name of an existing dictionary or dict_users.
          required: true
          schema:
            type: string
        - schema:
            x-xml-type: xs:integer
            type: string
          in: query
          example: '1'
          name: page
          description: The page page to return based on the given pageSize
          required: false
        - schema:
            x-xml-type: xs:integer
            type: string
          in: query
          example: '10'
          name: pageSize
          description: Number of entries to return per request
          required: false
        - schema:
            nullable: true
            x-xml-type: xs:string
            type: string
          in: query
          name: id
          description: Filter by ids starting with this string
          required: false
        - schema:
            nullable: true
            x-xml-type: xs:string
            type: string
          in: query
          name: ids
          description: Return entries matching exactly the ids provided as a comma separated list
          required: false
        - schema:
            nullable: true
            x-xml-type: xs:string
            type: string
          in: query
          name: q
          description: "A name of a query template stored in the profile (everyone) or\r\nan XPath or XQuery to exeute as filter (only admins for this dict)"
          required: false
        - schema:
            nullable: true
            x-xml-type: xs:string
            type: string
          in: query
          name: sort
          description: "One of \"asc\", \"desc\" or \"none\" (everyone) or\r\nan XPath or XQuery to execute for sorting the filtered results (only admins for this dict)"
          required: false
        - schema:
            nullable: true
            x-xml-type: xs:string
            type: string
          in: query
          name: altLemma
          description: A name of an alternative lemma definition to use (specified in profile)
          required: false
        - schema:
            nullable: true
            x-xml-type: xs:string
            type: string
          in: query
          name: lock
          description: "true or an amount of time in seconds the selected entries should be locked for editing\r\nOnly authenticated users."
          required: false
        - schema:
            x-xml-type: xs:string
            type: string
          in: header
          name: Authorization
          description: Used to determine if user is allowed to use any XQuery or XPath for q and sort
          required: false
        - schema:
            nullable: true
            x-xml-type: xs:string
            type: string
          in: header
          name: Accept
          description: Used to determine if the user was authenticated or is anonymous.
          required: false
        responses:
          "200":
            description: OK
            content: {}
          "401":
            description: Unauthorized
            content: {}
          "403":
            description: Forbidden
            content: {}
          "406":
            description: Not Acceptable
            content: {}
          "415":
            description: Unsupported Media Type
            content: {}
      post:
        operationId: postEntry
        tags:
        - entries
        description: 'Create a new entry. An id is automatically assigned. TODO: implement
          -> An id may be supplied by admin users to create entries in the special entries
          section of the dictionary below id 700.'
        parameters:
        - name: dict_name
          in: path
          description: Name of an existing dictionary or dict_users.
          required: true
          schema:
            type: string
        requestBody:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/entries'
          required: true
        responses:
          "201":
            description: Created
            content: {}
          "400":
            description: Client Error
            content: {}
          "401":
            description: Unauthorized
            content: {}
          "403":
            description: Forbidden
            content: {}
          "406":
            description: Not Acceptable
            content: {}
          "415":
            description: Unsupported Media Type
            content: {}
          "422":
            description: Unprocessable Entity
            content: {}
        x-codegen-request-body-name: body
      patch:
        operationId: patchEntries
        tags:
        - entries
        description: Create a set of Entries or change them in bulk (e. g. lock or unlock
          many entries).
        parameters:
        - name: dict_name
          in: path
          description: Name of an existing dictionary or dict_users.
          required: true
          schema:
            type: string
        requestBody:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/entries'
          required: true
        responses:
          "200":
            description: OK
            content: {}
          "400":
            description: Client Error
            content: {}
          "401":
            description: Unauthorized
            content: {}
          "403":
            description: Forbidden
            content: {}
          "406":
            description: Not Acceptable
            content: {}
          "415":
            description: Unsupported Media Type
            content: {}
          "422":
            description: Unprocessable Entity
            content: {}
        x-codegen-request-body-name: body
    /dicts/{dict_name}/entries/{entries_id}:
      get:
        operationId: getEntryById
        tags:
        - entries
        description: Get an entry and (TODO) lock it for writing if the user has the
          right to do this.
        parameters:
        - name: dict_name
          in: path
          description: Name of an existing dictionary or dict_users.
          required: true
          schema:
            type: string
        - name: entries_id
          in: path
          description: URL parameter entries_id
          required: true
          schema:
            maximum: 1
            minimum: 1
            type: string
        - name: lock
          in: query
          description: Whether to lock the entry for editing it and how long in seconds.
            For true the maximum duration allowed by the server is used.
          allowEmptyValue: true
          schema:
            maximum: 1
            minimum: 0
            pattern: ($|\d+|true)
            type: string
        responses:
          "200":
            description: OK
            content: {}
          "401":
            description: Unauthorized
            content: {}
          "403":
            description: Forbidden
            content: {}
          "404":
            description: Not Found
            content: {}
          "406":
            description: Not Acceptable
            content: {}
      put:
        operationId: putEntryById
        summary: Change a dictionary entry.
        parameters:
          - name: dict_name
            in: path
            description: Name of an existing dictionary or dict_users.
            required: true
            schema:
              type: string
          - name: entries_id
            in: path
            description: URL parameter entries_id
            required: true
            schema:
              maximum: 1
              minimum: 1
              type: string
          - schema:
              x-xml-type: xs:string
              type: string
            in: header
            name: Content-Type
            description: Required to be application/json else returns 415.
            required: false
          - schema:
              x-xml-type: xs:string
              type: string
            in: header
            name: Accept
            description: Required to be application/vnd.wde.v2+json else returns 403.
            required: false
          - schema:
              x-xml-type: xs:string
              type: string
            in: header
            name: Authorization
            description: Required for getting the user for the changelog.
            required: false
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entries'
          description: 'JSON describing the changed entry. Processed as variable: $userData'
          required: true
        responses:
          '200':
            content:
              application/vnd.wde.v2+json:
                schema:
                  $ref: '#/components/schemas/entries'
              application/problem+xml:
                schema:
                  x-xml-type: item()
                  type: string
              application/problem+json:
                schema:
                  x-xml-type: item()
                  type: string
            description: >-
              The changed entry. Including the changelog entry the server
              generated.
        tags:
          - entries
        description: >-
          The entry is saved in the changelog db before it is changed . The
          authorized user has to own the lock to do this. Otherwise a 422 error is
          returned.
      delete:
        operationId: deleteEntryById
        tags:
        - entries
        description: Delete an entry. Admin user authorization needed.
        parameters:
        - name: dict_name
          in: path
          description: Name of an existing dictionary or dict_users.
          required: true
          schema:
            type: string
        - name: entries_id
          in: path
          description: URL parameter entries_id
          required: true
          schema:
            maximum: 1
            minimum: 0
            type: string
        responses:
          "204":
            description: No Content
            content: {}
          "401":
            description: Unauthorized
            content: {}
          "403":
            description: Forbidden
            content: {}
          "406":
            description: Not Acceptable
            content: {}
          "422":
            description: You don't own the lock for the entry to delete
            content: {}
      patch:
        operationId: patchEntryById
        tags:
        - entries
        description: Manipulate just one part of the entry. (TODO change to post for
          compatibility reasons?)
        parameters:
        - name: dict_name
          in: path
          description: Name of an existing dictionary or dict_users.
          required: true
          schema:
            type: string
        - name: entries_id
          in: path
          description: URL parameter entries_id
          required: true
          schema:
            maximum: 1
            minimum: 0
            type: string
        requestBody:
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/entries'
          required: true
        responses:
          "200":
            description: OK
            content: {}
          "400":
            description: Client Error
            content: {}
          "401":
            description: Unauthorized
            content: {}
          "403":
            description: Forbidden
            content: {}
          "404":
            description: Not Found
            content: {}
          "406":
            description: Not Acceptable
            content: {}
          "415":
            description: Unsupported Media Type
            content: {}
          "422":
            description: Unprocessable Entity
            content: {}
        x-codegen-request-body-name: body
    /dicts/dict_users/users:
      post:
        operationId: postDictUsersUser
        summary: Create a user.
        description: Create a user.
        parameters:
          - schema:
              x-xml-type: xs:string
              type: string
            in: header
            name: Content-Type
            required: false
          - schema:
              x-xml-type: xs:string
              type: string
            in: header
            name: Accept
            required: false
        requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/users"
              example: 
                {
                  "id": "The internal ID. When creating a new user this will be filled in automatically.",
                  "userID": "The user id or username.",
                  "pw": "The password for that user and that table.",
                  "read": "Whether the user has read access.",
                  "write": "Whether the user has write access.",
                  "writeown": "Whether the user may change entries that dont belong to her.",
                  "table": "A table name. Will only be returned on administrative queries on the special dict_users storage."
                }
          description: ' Processed as variable: $userData'
          required: true
        responses:
          '200':
            content:
              application/vnd.wde.v2+json:
                schema:
                  nullable: true
                  x-xml-type: item()
                  type: string
              application/problem+xml:
                schema:
                  nullable: true
                  x-xml-type: item()
                  type: string
              application/problem+json:
                schema:
                  nullable: true
                  x-xml-type: item()
                  type: string
            description: ''
        tags:
          - users
      get:
        operationId: getDictUsersUser
        summary: List users.
        description: List users.
        parameters:
          - schema:
              x-xml-type: xs:integer
              type: string
            in: query
            name: page
            required: false
          - schema:
              x-xml-type: xs:integer
              type: string
            in: query
            name: pageSize
            required: false
        responses:
          '200':
            content:
              application/vnd.wde.v2+json:
                schema:
                  nullable: true
                  x-xml-type: item()
                  type: string
              application/json:
                schema:
                  nullable: true
                  x-xml-type: item()
                  type: string
              application/problem+xml:
                schema:
                  nullable: true
                  x-xml-type: item()
                  type: string
              application/problem+json:
                schema:
                  nullable: true
                  x-xml-type: item()
                  type: string
              application/hal+json:
                schema:
                  nullable: true
                  x-xml-type: item()
                  type: string
            description: ''
        tags:
          - users
    /dicts/dict_users/users/{userName_or_id}:
      parameters:
        - schema:
            x-xml-type: xs:string
            type: string
          in: path
          name: userName_or_id
          required: true
      delete:
        operationId: deleteDictUsersUserByUserNameOrId
        summary: Remove a user.
        description: Remove a user.
        parameters: []
        responses:
          '200':
            content:
              application/xml:
                schema:
                  nullable: true
                  x-xml-type: item()
                  type: string
            description: ''
        tags:
          - users
      get:
        operationId: getDictUsersUserByUserNameOrId
        summary: Get user data.
        description: Get user data for a particular user for a dictionary
        parameters:
          - schema:
              x-xml-type: xs:string
              type: string
            in: header
            name: Accept
            required: false
        responses:
          '200':
            content:
              application/vnd.wde.v2+json:
                schema:
                  $ref: "#/components/schemas/users"
              application/json:
                schema:
                  $ref: "#/components/schemas/users"
              application/problem+xml:
                schema:
                  nullable: true
                  x-xml-type: item()
                  type: string
              application/problem+json:
                schema:
                  nullable: true
                  x-xml-type: item()
                  type: string
              application/hal+json:
                schema:
                  nullable: true
                  x-xml-type: item()
                  type: string
            description: ''
        tags:
          - users
  components:
    securitySchemes:
      httpBasicWithSHA256Pws:
        scheme: basic
        type: http
        description: This service uses HTTP Basic authentication. To somewhat protect the Passwords their SHA256 hash is created when set by VLE. There may be unhashed passwords on the server for test purpose.
    schemas:
      dicts:
        required:
        - name
        type: object
        properties:
          name:
            type: string
            description: Name of the dictionary.
        example:
          name: Name of the dictionary.
      entries:
        required:
        - entry
        - lemma
        - sid
        type: object
        properties:
          id:
            type: string
            description: The automatically generated id.
          sid:
            type: string
            description: A string id. Ought to be unique. Should not contain any Unicode
              characters.
          lemma:
            type: string
            description: The lemma of the entry. Probably contains Unicode characters.
          status:
            type: string
            description: Status of the entry. E. g. released.
          owner:
            type: string
            description: The user that owns the entry.
          locked:
            type: string
            description: The user that currently edits the entry.
          type:
            type: string
            description: Type of the entry. For quickly limiting searches. E. g. lemma,
              example, multi_word_unit.
          entry:
            type: string
            description: The entry in the dictionary. A TEI XML snippet (or a whole
              document).
        example:
          {
            "sid": "The internal ID. May be empty string.",
            "lemma": "A lemma. May be empty string.",
            "entry": "The entry as XML fragment.",
            "storedEntryMd5": "Optional: the last known checksum for the entry in the DB.",
            "owner": "Optional: set (or clear) the owner of an entry. TODO: enforce only write own",
            "status": "Optional: set (or clear) a status string. 'released' was used with some special meaning in the past"
          }
      users:
        required:
        - id
        - pw
        - read
        - userID
        - write
        - writeown
        type: object
        properties:
          id:
            type: string
            description: The internal ID. When creating a new user this will be filled
              in automatically.
          userID:
            type: string
            description: The user's ID or user name.
          pw:
            type: string
            description: The password for that user and that table.
          read:
            type: string
            description: Whether the user has read access.
          write:
            type: string
            description: Whether the user has write access.
          writeown:
            type: string
            description: Whether the user may change entries that don't belong to her.
          table:
            type: string
            description: A table name. Will only be returned on administrative queries
              on the special dict_users storage.
        example:
          id: The internal ID. When creating a new user this will be filled in automatically.
          pw: The password for that user and that table.
          userID: The username the user uses to log in
          read: Whether the user has read access.
          write: Whether the user has write access.
          writeown: Whether the user may change entries that don't belong to her.
          table: A table name. Will only be returned on administrative queries on the
            special dict_users storage.
      problem_json_201:
        required:
         - type
         - title
         - status
        properties:
          type:
            type: string
            description: "https:\/\/tools.ietf.org\/html\/rfc7231#section-6"
          title:
            type: string
            description: "Created"
          status:
            type: string
            description: "201"
        example:
         {
          "type": "https:\/\/tools.ietf.org\/html\/rfc7231#section-6",
          "title": "Created",
          "status": "201"
         }
contentType: yaml
